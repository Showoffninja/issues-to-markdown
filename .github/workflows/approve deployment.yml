name: Approve Deployment

on:
  workflow_dispatch:
    inputs:
      run_id:
        description: "The workflow run ID to approve deployments for"
        required: true
      comment:
        description: "Comment for the deployment approval"
        required: true
        default: "Deployment approved"

permissions:
  deployments: write
  statuses: write

jobs:
  approve:
    runs-on: ubuntu-latest
    steps:
      - name: Get pending deployments
        id: pending
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const runId = parseInt('${{ github.event.inputs.run_id }}');
            if (isNaN(runId)) {
              core.setFailed('Invalid run ID');
              return;
            }

            try {
              const pendingDeploymentsResponse = await github.rest.actions.getPendingDeploymentsForRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: runId
              });

              const pendingDeployments = pendingDeploymentsResponse.data;
              console.log(`Found ${pendingDeployments.length} pending deployments`);

              if (pendingDeployments.length === 0) {
                core.setOutput('has_pending_deployments', 'false');
                console.log('No pending deployments found for this run');
                return;
              }

              // Get environment IDs
              const environmentIds = pendingDeployments.map(deployment => deployment.environment.id);
              core.setOutput('environment_ids', JSON.stringify(environmentIds));
              core.setOutput('has_pending_deployments', 'true');
            } catch (error) {
              core.setFailed(`Error getting pending deployments: ${error.message}`);
              console.log(`Full error details: ${JSON.stringify(error, null, 2)}`);
            }

      - name: Approve deployments
        if: steps.pending.outputs.has_pending_deployments == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const runId = parseInt('${{ github.event.inputs.run_id }}');
            const comment = '${{ github.event.inputs.comment }}';
            const environmentIds = JSON.parse('${{ steps.pending.outputs.environment_ids }}');

            if (isNaN(runId)) {
              core.setFailed('Invalid run ID');
              return;
            }

            try {
              const approvalResponse = await github.rest.actions.reviewPendingDeploymentsForRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: runId,
                environment_ids: environmentIds,
                state: 'approved',
                comment: comment
              });

              console.log('Deployment approved successfully');
            } catch (error) {
              core.setFailed(`Error approving deployment: ${error.message}`);
              console.log(`Full error details: ${JSON.stringify(error, null, 2)}`);
            }