name: Approve Deployment

on:
  workflow_dispatch:
    inputs:
      run_id:
        description: "The workflow run ID to approve deployments for"
        required: true
      comment:
        description: "Comment for the deployment approval"
        required: true
        default: "Deployment approved"

permissions:
  deployments: write

jobs:
  approve:
    runs-on: ubuntu-latest
    steps:
      - name: Get pending deployments
        id: pending
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const runId = core.getInput('run_id');

            try {
              const pendingDeploymentsResponse = await github.rest.actions.getPendingDeploymentsForRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: runId
              });
              
              const pendingDeployments = pendingDeploymentsResponse.data;
              console.log(`Found ${pendingDeployments.length} pending deployments`);
              
              if (pendingDeployments.length === 0) {
                console.log('No pending deployments found for this run');
                return;
              }
              
              // Get environment IDs
              const environmentIds = pendingDeployments.map(deployment => deployment.environment.id);
              core.setOutput('environment_ids', JSON.stringify(environmentIds));
              
              return environmentIds;
            } catch (error) {
              console.log(error);
              core.setFailed(`Error getting pending deployments: ${error.message}`);
            }

      - name: Approve deployments
        if: steps.pending.outputs.environment_ids
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const runId = core.getInput('run_id');
            const comment = core.getInput('comment');
            const environmentIds = JSON.parse(core.getInput('environment_ids'));

            try {
              const approvalResponse = await github.rest.actions.reviewPendingDeploymentsForRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: runId,
                environment_ids: environmentIds,
                state: 'approved',
                comment: comment
              });
              
              console.log('Deployment approved successfully');
            } catch (error) {
              console.log(error);
              core.setFailed(`Error approving deployment: ${error.message}`);
            }